{% import 'adapter.j2' as adapter %}
# DAG name: {{ dag.name }}
# Schedule interval = {{ dag.schedule_interval }}
import os
from datetime import datetime
from typing import Dict

from typhoon.core.config import TyphoonConfig
import typhoon.contrib.functions as typhoon_functions
import typhoon.contrib.transformations as typhoon_transformations
from typhoon.contrib.hooks.hook_factory import get_hook
from typhoon.handler import handle
from typhoon.core import SKIP_BATCH, task, DagContext, setup_logging
{% for transformations_module in get_transformations_modules(dag) %}

import {{ transformations_module }}
{% endfor %}
{% for functions_module in get_functions_modules(dag.nodes) %}
import {{ functions_module }}
{% endfor %}

{% if debug_mode %}

# Only meant for local debugging. Do NOT use in production
os.environ['TYPHOON_ENV'] = '{{ environment }}'

{% endif %}
os.environ['TYPHOON_HOME'] = os.path.dirname(__file__)
DAG_ID = '{{ dag.name }}'
TYPHOON_CONFIG = TyphoonConfig()


def {{ dag.name }}_main(event, context):
    setup_logging()
    if event.get('type'):     # Async execution
        return handle(event, context)

    # Main execution
    dag_context = DagContext.from_date_string(event['time'])

    {% for source in dag.sources %}
    {{ source }}_branches(dag_context=dag_context)
    {% endfor %}


# Branches
{% for node_name, node in dag.nodes.items() %}
@task(asynchronous={% if not dev_mode and node.asynchronous %}True{% else %}False{% endif %}, dag_name='{{ dag.name }}')
def {{ node_name }}_branches(dag_context: DagContext, {% if node_name not in dag.sources%}config, {% endif %}batch_num: int = 0):
    data_generator = {{ node_name }}_node(dag_context=dag_context, {% if node_name not in dag.sources%}config=config, {% endif %}batch_num=batch_num)
    for batch_num, data in enumerate(data_generator or [], start=1):
        if data is SKIP_BATCH:
            print(f'Skipping batch {batch_num} for {{ node_name }}')
            continue

        {% for out_node in dag.out_nodes(node_name) %}
        config = {}
        {% for k, v in dag.get_edge(node_name, out_node).adapter.items() %}
        {{ adapter.adapter_params(k, v) | indent(8, False) }}
        {% endfor %}
        {{ out_node }}_branches(dag_context=dag_context, config=config, batch_num=batch_num)

        {% else %}
        pass        # Necessary for the generator to be exhausted since it probably has side effects

        {% endfor %}

{% endfor %}
# Nodes
{% for node_name, node in dag.nodes.items() %}
def {{ node_name }}_node(dag_context: DagContext, {% if node_name not in dag.sources %}config: Dict, {% endif %}batch_num: int):
    {% if node_name in dag.sources%}
    config = {}

    {% endif %}
    {% for k, v in node.config.items() %}
    {{ adapter.adapter_params(k, v) | indent(4, False) }}
    {% endfor %}
    yield from {{ node['function'] | clean_function_name('functions') }}(
        **config,
    )


{% endfor %}
{% if debug_mode %}
if __name__ == '__main__':
    import os

    os.environ['TYPHOON_ENV'] = '{{ environment }}'

    example_event = {
        'time': '2019-02-05T03:00:00Z'
    }
    example_event_task = {
        'type': 'task',
        'dag_name': '{{ name }}',
        'task_name': '{{ (dag.nodes.keys() | list)[0] }}_branches',
        'trigger': 'dag',
        'attempt': 1,
        'args': [],
        'kwargs': {'dag_context': DagContext.from_date_string('2019-02-05T03:00:00Z').to_dict()},
    }

    {{ dag.name }}_main(example_event, None)
{% endif %}
