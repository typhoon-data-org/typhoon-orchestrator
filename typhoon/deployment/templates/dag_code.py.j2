{% import 'adapter.j2' as adapter %}
# DAG name: {{ name }}
# Schedule interval = {{ schedule_interval }}
import os
from datetime import datetime

import dateutil.parser
import typhoon.contrib.functions as typhoon_functions
import typhoon.contrib.transformations as typhoon_transformations
from typhoon.models.dag import dag
from typhoon.models.task import task_logging_wrapper
from zappa.async import task
{% for transformations_module in get_transformations_modules(edges) %}
import {{ transformations_module }}
{% endfor %}
{% for functions_module in get_functions_modules(nodes) %}
import {{ functions_module }}
{% endfor %}

os.environ['TYPHOON_HOME'] = os.path.dirname(__file__)
DAG_CONFIG = {}     # Global variable with DAG config. Will be populated in main


@dag
def {{ name }}_main(event, context):
    DAG_CONFIG['dag_id'] = '{{ name }}'
    DAG_CONFIG['execution_date'] = dateutil.parser.parse(event['time'])
    DAG_CONFIG['ds'] = event['time'].split('T')[0]
    DAG_CONFIG['ds_nodash'] = event['time'].replace('-', '')
    DAG_CONFIG['etl_timestamp'] = datetime.now().strftime('%Y-%m-%dT%H:%M:%S')

    {% for source in get_sources(structure) %}
    {{ source }}_branch()
    {% endfor %}


# Branches
{% for node_name, node in nodes.items() %}
{% if node.get('async', True) %}
@task
{% endif %}
def {{ node_name }}_branch({% if node_name not in get_sources(structure)%}data, {% endif %}batch_num=0):
    data_generator = {{ node_name }}_node({% if node_name not in get_sources(structure)%}data, {% endif %}batch_num)
    for batch_num, data in enumerate(data_generator, start=1):
        {% for out_node in structure[node_name] %}
        config = {}
        {% for k, v in get_edge(edges, node_name, out_node)[1]['adapter'].items() %}
        {{ adapter.adapter_params(k, v) }}
        {% endfor %}
        {{ out_node }}_branch(config, batch_num)

        {% else %}
        pass        # Necessary for the generator to be exhausted since it probably has side effects

        {% endfor %}

{% endfor %}
# Nodes
{% for node_name, node in nodes.items() %}
def {{ node_name }}_node({% if node_name not in get_sources(structure)%}config, {% endif %}batch_num):
    node_function = task_logging_wrapper(
        bucket='typhoon-orchestrator',
        dag_config=DAG_CONFIG,
        task_id='{{ node_name }}',
        batch_num=batch_num,
    )({{ node['function'] | clean_function_name('functions') }})       # Wrapper to add logging

    yield from node_function(
        {% for param, value in node.get('config', {}).items() %}
        {{ param }}={{ value | clean_simple_param }},
        {% endfor %}
        {% if node_name not in get_sources(structure) %}
        **config,
        {% endif %}
    )


{% endfor %}
if __name__ == '__main__':
    os.environ['TYPHOON-ENV'] = 'dev'
    example_event = {
        'time': '2019-02-05T03:00:00Z'
    }
    {{ name }}_main(example_event, None)
