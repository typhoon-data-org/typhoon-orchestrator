# DAG name: {{ name }}
# Schedule interval = {{ schedule_interval }}
from zappa.async import task

{% for functions_module in get_functions_modules(nodes) %}
from functions import {{ functions_module }}
{% endfor %}
{% for adapter_module in get_adapters_modules(adapters) %}
from adapters import {{ adapter_module }}
{% endfor %}


def {{ name }}_main(event, context):
    {% for source in get_sources(structure) %}
    {{ source }}_branch()
    {% endfor %}


# Branches
{% for node_name, node in nodes.items() %}
{% if get_sources(structure)|length > 1 or node_name not in get_sources(structure) %}
@task
{% endif %}
def {{ node_name }}_branch({% if node_name not in get_sources(structure)%}data{% endif %}):
    data_generator = {{ node_name }}_node({% if node_name not in get_sources(structure)%}data{% endif %})
    for data in data_generator:
        {% for out_node in structure[node_name] %}
        data = {{ get_edge(edges, node_name, out_node)[1]['adapter'] }}_adapter(data)
        {{ out_node }}_branch(data)
        {% else %}
        pass        # Necessary for the generator to be exhausted since it probably has side effects
        {% endfor %}


{% endfor %}
# Adapters
{% for adapter_name, adapter in adapters.items() %}
def {{ adapter_name }}_adapter(data):
    return {{ adapter['function'] }}(
        data=data,
        {% for param, value in adapter.get('config', {}).items() %}
        {{ param }}='{{ value }}',
        {% endfor %}
    )


{% endfor %}
# Nodes
{% for node_name, node in nodes.items() %}
def {{ node_name }}_node({% if node_name not in get_sources(structure)%}data{% endif %}):
    yield from {{ node['function'] }}(
        {% for param, value in node.get('config', {}).items() %}
        {{ param }}='{{ value }}',
        {% endfor %}
        {% if node_name not in get_sources(structure) %}
        **data,
        {% endif %}
    )


{% endfor %}
if __name__ == '__main__':
    {{ name }}_main(None, None)
